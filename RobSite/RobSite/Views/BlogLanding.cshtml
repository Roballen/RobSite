@using System.Linq
@using uBlogsy.Common.Extensions
@using uBlogsy.BusinessLogic
@using uHelpsy.Extensions
@using umbraco.cms.helpers
@inherits UmbracoTemplatePage
@{
    Layout = "InnerMaster.cshtml";
    const int ITEMS_PER_PAGE = 20; // for testing

    // get item count
    var itemsPerPage = ITEMS_PER_PAGE;

    // get tag, label, or author from query string
    var tag = Request.QueryString["tag"];
    var label = Request.QueryString["label"];
    var author = Request.QueryString["author"];
    var searchTerm = Request.QueryString["search"];
    var commenter = Request.QueryString["commenter"];
    int page = int.TryParse(Request.QueryString["page"], out page) ? page : 1;
    var year = Request.QueryString["year"];
    var month = Request.QueryString["month"];
    var day = Request.QueryString["day"];
    int postCount;

    var posts = PostService.Instance.GetPosts(Model.Content, tag, label, author, searchTerm, commenter, year, month, day, out postCount).Skip((page - 1) * itemsPerPage).Take(itemsPerPage).ToIPublishedContent(true);
    //var posts = NoLuceneFallbackService.Instance.GetPosts(Model.Content.Id, tag, label, author, searchTerm, commenter, year, month, out postCount).Skip((page - 1) * itemsPerPage).Take(itemsPerPage);

    // pagination
    @RenderHeader();
    //@RenderPagination(page, postCount, itemsPerPage);
    @RenderForLanding(posts);
}

@helper RenderHeader()
{
     <div id="header-landing" class="blog">
        @{ Html.RenderPartial("_TopNavigation"); }
    </div>
}

@helper RenderForLanding(IEnumerable<IPublishedContent> posts)
{

    <div class="section-page-landing section-light-grey" id="blog_landing">
        <div class="inner-section">
            <div class="container">
                @if (Request.QueryString["search"] != null)
                {
                    <h3>@posts.Count() Results:</h3>
                }

                @foreach (var n in posts)
                {
                    <div class="row">
                        <div class="col-md-3">
                            @RenderPostImage(n, "")
                        </div>
                        <div class="col-md-9">
                            <h2><a href="@n.Url()" title="@n.GetPropertyValue("uBlogsyContentTitle")"><span>@n.GetPropertyValue("uBlogsyContentTitle")</span></a></h2>
                            <p>
                                @n.GetPropertyValue("uBlogsyContentSummary")
                            </p>
                            <ul class="list-unstyled list-inline">
                                <li class="">
                                    <i class="glyphicon glyphicon-calendar"></i>
                                    <strong>@(n.GetPropertyValue<DateTime>("uBlogsyPostDate").ToString("MM/dd/yyyy"))</strong>
                                </li>
                                
                                @{
                                    var tags = PostService.Instance.GetTags(n, false).Select(x => x.Key);
                                }
                                @foreach (var tag in tags)
                                {
                                    if ( tag.IsEmpty() ) { continue;}
                                    <li>
                                        <i class="glyphicon glyphicon-tag"></i>
                                        <a href="@CurrentPage.Url()?tag=@Server.UrlEncode(tag)" title="@tag">@tag</a>
                                    </li>
                                }
                            </ul>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>


}

@helper RenderPostImage(IPublishedContent node, string defaultImage)
{
    var imageId = node.GetPropertyValue<string>("uBlogsyPostImage");

    if (string.IsNullOrWhiteSpace(imageId) && string.IsNullOrWhiteSpace(defaultImage))
    {
        // no property or default so do nothing
        return;
    }

    var imageData = new Dictionary<string, object>()
             {
                 {"Alias", "uBlogsyPostImage"},
                 {"Suffix", ""},
                 {"Height", -1},
                 {"Width", -1},
                 {"CssClass", "img-responsive"},
                 {"Title", "Main Image"},
                 {"Map", string.Empty },
                 {"DefaultImage", defaultImage},
                 {"Node", node}
             };

            <a href="@node.Url" title="Post image">
                <figure class="uBlogsy_post_image">
                    @Html.Partial("~/Views/Partials/uBlogsy/Shared/uBlogsyShowImage.cshtml", imageData)
                </figure>
            </a>
}